// const admin = require('../util/admin')
const {admin, db} = require('../util/admin')
const firebase = require('firebase')
const auth = firebase.auth();

/*

    I have never done this before this is a custom middleware
    --> Basically what this is doing is validating our token.
    --> So that our token is not from somewhere else it is 
        generated by us and it is not duplicated by someone else

        and that our token is not expired 
    --> Basically all the validation stuff

    our header should always be authorization and Bearer Token is just a good practice

    1. We set our variable udToken to the orginal token we got
        if we dont have a token then we just say not authorized

    2. We verify token and pull our user out of the token 
        and get his user name and any othe data if we want
    
*/

module.exports =  (req, res, next) => {
    let idToken;
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')){
      idToken = req.headers.authorization.split('Bearer ')[1];

  }  else {
      console.error('No authorization')
      return res.status(403).json({ error : 'Unauthorized'});
  }

  admin.auth().verifyIdToken(idToken)

  .then(decodedToken => {
      req.user = decodedToken;
    //   console.log(req.user)
      return db.collection('users')
        .where('userId', '==', req.user.uid)
        .limit(1)
        .get()
  })
  .then(data => {
      req.user.email = data.docs[0].data().email;
      req.user.imageUrl = data.docs[0].data().imageUrl;
      return next();  
  })

  .catch(err => {

      console.error('This is not valid token or the token might have been expired', err);
      return res.staus(403).json(err)
  })
}



